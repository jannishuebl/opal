opal_filter "regular_expressions" do
  fails "MatchData#[Symbol] returns the corresponding named match when given a Symbol"
  fails "MatchData#[Symbol] returns the corresponding named match when given a String"
  fails "MatchData#[Symbol] returns the matching version of multiple corresponding named match"
  fails "MatchData#[Symbol] returns the last match when multiple named matches exist with the same name"
  fails "MatchData#[Symbol] returns nil on non-matching named matches"
  fails "MatchData#[Symbol] raises an IndexError if there is no named match corresponding to the Symbol"
  fails "MatchData#[Symbol] raises an IndexError if there is no named match corresponding to the String"
  fails "MatchData#[Symbol] returns matches in the String's encoding"

  fails "MatchData#begin returns the offset of the start of the nth element"
  fails "MatchData#begin returns nil when the nth match isn't found"
  fails "MatchData#begin returns the offset for multi byte strings"
  fails "MatchData#begin returns the offset for multi byte strings with unicode regexp"

  fails "MatchData#end returns the offset of the end of the nth element"
  fails "MatchData#end returns nil when the nth match isn't found"
  fails "MatchData#end returns the offset for multi byte strings"
  fails "MatchData#end returns the offset for multi byte strings with unicode regexp"

  fails "MatchData#names returns an Array"
  fails "MatchData#names sets each element to a String"
  fails "MatchData#names returns the names of the named capture groups"
  fails "MatchData#names returns [] if there were no named captures"
  fails "MatchData#names returns each name only once"
  fails "MatchData#names equals Regexp#names"

  fails "MatchData#offset returns a two element array with the begin and end of the nth match"
  fails "MatchData#offset returns [nil, nil] when the nth match isn't found"
  fails "MatchData#offset returns the offset for multi byte strings"
  fails "MatchData#offset returns the offset for multi byte strings with unicode regexp"

  fails "MatchData#regexp returns the pattern used in the match"

  fails "String#gsub with pattern and replacement replaces \\k named backreferences with the regexp's corresponding capture"
  fails "String#gsub with pattern and replacement doesn't freak out when replacing ^" #Only fails "Text\nFoo".gsub(/^/, ' ').should == " Text\n Foo"
  fails "String#gsub with pattern and replacement supports \\G which matches at the beginning of the remaining (non-matched) string"
  fails "String#gsub with pattern and replacement returns a copy of self with all occurrences of pattern replaced with replacement" #Only fails str.gsub(/\Ah\S+\s*/, "huh? ").should == "huh? homely world. hah!"

  fails "String#index with Regexp supports \\G which matches at the given start offset"

  fails "String#match matches \\G at the start of the string"

  fails "String#scan supports \\G which matches the end of the previous match / string start for first match"

  fails "String#sub with pattern, replacement supports \\G which matches at the beginning of the string"
  
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'u' option"
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'e' option"
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 's' option"
  fails "Regexp#options does not include Regexp::FIXEDENCODING for a Regexp literal with the 'n' option"
  fails "Regexp#options includes Regexp::NOENCODING for a Regexp literal with the 'n' option"
  
  fails "Regexp.union returns a Regexp with the encoding of an ASCII-incompatible String argument"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with US-ASCII encoding if all arguments are ASCII-only"
  fails "Regexp.union returns a Regexp with the encoding of multiple non-conflicting ASCII-incompatible String arguments"
  fails "Regexp.union returns a Regexp with the encoding of multiple non-conflicting Strings containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters and another ASCII-only String"
  fails "Regexp.union returns a Regexp with UTF-8 if one part is UTF-8"
  fails "Regexp.union raises ArgumentError if the arguments include conflicting ASCII-incompatible Regexps"
  fails "Regexp.union raises ArgumentError if the arguments include conflicting fixed encoding Regexps"
  fails "Regexp.union raises ArgumentError if the arguments include a fixed encoding Regexp and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include a String containing non-ASCII-compatible characters and a fixed encoding Regexp in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a Regexp containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a Regexp containing non-ASCII-compatible characters in a different encoding"
  
  fails "Regexp.new given a Regexp uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a Regexp uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a Regexp returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a Regexp returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a Regexp returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a Regexp returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a Regexp returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a Regexp returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a Regexp returns a Regexp with the input String's encoding"
  fails "Regexp.new given a Regexp returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a Regexp sets the encoding to UTF-8 if the Regexp literal has the 'u' option"
  fails "Regexp.new given a Regexp sets the encoding to EUC-JP if the Regexp literal has the 'e' option"
  fails "Regexp.new given a Regexp sets the encoding to Windows-31J if the Regexp literal has the 's' option"
  fails "Regexp.new given a Regexp sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only"
  fails "Regexp.new given a Regexp sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only"
  fails "Regexp.new given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a String returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String returns a Regexp with the input String's encoding"
  fails "Regexp.new given a String returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a String sets the encoding to UTF-8 if the Regexp literal has the 'u' option"
  fails "Regexp.new given a String sets the encoding to EUC-JP if the Regexp literal has the 'e' option"
  fails "Regexp.new given a String sets the encoding to Windows-31J if the Regexp literal has the 's' option"
  fails "Regexp.new given a String sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only"
  fails "Regexp.new given a String sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only"
  fails "Regexp.new given a String with escaped characters uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a String with escaped characters uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a String with escaped characters sets the encoding to UTF-8 if the Regexp literal has the 'u' option"
  fails "Regexp.new given a String with escaped characters sets the encoding to EUC-JP if the Regexp literal has the 'e' option"
  fails "Regexp.new given a String with escaped characters sets the encoding to Windows-31J if the Regexp literal has the 's' option"
  fails "Regexp.new given a String with escaped characters sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only"
  fails "Regexp.new given a String with escaped characters sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only"
  fails "Regexp.new given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.new given a String with escaped characters accepts \\u{H} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts characters followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHH} followed by characters"
  fails "Regexp.new given a String with escaped characters accepts escaped hexadecimal digits followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts escaped octal digits followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  # regexp extended related
  fails "Regexp.new given a String accepts a Fixnum of two or more options ORed together as the second argument"
end
