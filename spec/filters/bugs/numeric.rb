opal_filter "Numeric" do
  fails "Numeric#abs2 returns the square of the absolute value of self"
  fails "Numeric#abs2 calls #* on self"
  fails "Numeric#abs2 returns NaN when self is NaN"
  fails "Numeric#abs returns self when self is greater than 0"
  fails "Numeric#abs returns self#\@- when self is less than 0"
  fails "Numeric#angle returns 0 if positive"
  fails "Numeric#angle returns Pi if negative"
  fails "Numeric#angle with a Numeric subclass returns 0 if self#<(0) returns false"
  fails "Numeric#angle with a Numeric subclass returns Pi if self#<(0) returns true"
  fails "Numeric#arg returns 0 if positive"
  fails "Numeric#arg returns Pi if negative"
  fails "Numeric#arg with a Numeric subclass returns 0 if self#<(0) returns false"
  fails "Numeric#arg with a Numeric subclass returns Pi if self#<(0) returns true"
  fails "Numeric#ceil converts self to a Float (using #to_f) and returns the #ceil'ed result"
  fails "Numeric#coerce returns [other, self] if self and other are instances of the same class"
  fails "Numeric#coerce returns [other.to_f, self.to_f] if self and other are instances of different classes"
  fails "Numeric#coerce raises an ArgumentError when passed a String"
  fails "Numeric#conj returns self"
  fails "Numeric#conjugate returns self"
  fails "Numeric#<=> returns 0 if self equals other"
  fails "Numeric#<=> returns nil if self does not equal other"
  fails "Numeric#<=> with subclasses of Numeric is called when instances are compared with #<"
  fails "Numeric#<=> with subclasses of Numeric is called when instances are compared with #<="
  fails "Numeric#<=> with subclasses of Numeric is called when instances are compared with #>"
  fails "Numeric#<=> with subclasses of Numeric is called when instances are compared with #>="
  fails "Numeric#denominator returns 1"
  fails "Numeric#denominator works with Numeric subclasses"
  fails "Numeric#div calls self#/ with other, then returns the #floor'ed result"
  fails "Numeric#div raises ZeroDivisionError for 0"
  fails "Numeric#divmod returns [quotient, modulus], with quotient being obtained as in Numeric#div then #floor and modulus being obtained by calling self#- with quotient * other"
  fails "Numeric#eql? returns false if self's and other's types don't match"
  fails "Numeric#eql? returns the result of calling self#== with other when self's and other's types match"
  fails "Numeric#fdiv coerces self with #to_f"
  fails "Numeric#fdiv coerces other with #to_f"
  fails "Numeric#floor converts self to a Float (using #to_f) and returns the #floor'ed result"
  fails "Numeric#i returns a Complex object"
  fails "Numeric#i sets the real part to 0"
  fails "Numeric#i sets the imaginary part to self"
  fails "Numeric#imag returns 0"
  fails "Numeric#imag raises an ArgumentError if given any arguments"
  fails "Numeric#imaginary returns 0"
  fails "Numeric#imaginary raises an ArgumentError if given any arguments"
  fails "Numeric#integer? returns false"
  fails "Numeric#magnitude returns self when self is greater than 0"
  fails "Numeric#magnitude returns self#\@- when self is less than 0"
  fails "Numeric#modulo returns self - other * self.div(other)"
  fails "Numeric#% returns self - other * self.div(other)"
  fails "Numeric#nonzero? returns self if self#zero? is false"
  fails "Numeric#nonzero? returns nil if self#zero? is true"
  fails "Numeric#numerator converts self to a Rational object then returns its numerator"
  fails "Numeric#numerator works with Numeric subclasses"
  fails "Numeric#phase returns 0 if positive"
  fails "Numeric#phase returns Pi if negative"
  fails "Numeric#phase with a Numeric subclass returns 0 if self#<(0) returns false"
  fails "Numeric#phase with a Numeric subclass returns Pi if self#<(0) returns true"
  fails "Numeric#polar returns a two-element Array"
  fails "Numeric#polar sets the first value to the absolute value of self"
  fails "Numeric#polar sets the last value to 0 if self is positive"
  fails "Numeric#polar sets the last value to Pi if self is negative"
  fails "Numeric#polar returns [NaN, NaN] if self is NaN"
  fails "Numeric#quo returns the result of self divided by the given Integer as a Rational"
  fails "Numeric#quo returns the result of self divided by the given Float as a Float"
  fails "Numeric#quo returns the result of self divided by the given Bignum as a Float"
  fails "Numeric#quo raises a ZeroDivisionError when the given Integer is 0"
  fails "Numeric#quo calls #to_r to convert the object to a Rational"
  fails "Numeric#quo raises a TypeError of #to_r does not return a Rational"
  fails "Numeric#quo raises a TypeError when given a non-Integer"
  fails "Numeric#quo returns the result of calling self#/ with other"
  fails "Numeric#real? returns true"
  fails "Numeric#real returns self"
  fails "Numeric#real raises an ArgumentError if given any arguments"
  fails "Numeric#rect returns an Array"
  fails "Numeric#rect returns a two-element Array"
  fails "Numeric#rect returns self as the first element"
  fails "Numeric#rect returns 0 as the last element"
  fails "Numeric#rect raises an ArgumentError if given any arguments"
  fails "Numeric#rectangular returns an Array"
  fails "Numeric#rectangular returns a two-element Array"
  fails "Numeric#rectangular returns self as the first element"
  fails "Numeric#rectangular returns 0 as the last element"
  fails "Numeric#rectangular raises an ArgumentError if given any arguments"
  fails "Numeric#remainder returns the result of calling self#% with other if self is 0"
  fails "Numeric#remainder returns the result of calling self#% with other if self and other are greater than 0"
  fails "Numeric#remainder returns the result of calling self#% with other if self and other are less than 0"
  fails "Numeric#remainder returns the result of calling self#% with other - other if self is greater than 0 and other is less than 0"
  fails "Numeric#remainder returns the result of calling self#% with other - other if self is less than 0 and other is greater than 0"
  fails "Numeric#round converts self to a Float (using #to_f) and returns the #round'ed result"
  fails "Numeric#singleton_method_added raises a TypeError when trying to define a singleton method on a Numeric"
  fails "Numeric#step with [stop, step] increments self using #+ until self > stop when step > 0"
  fails "Numeric#step with [stop, step] decrements self using #+ until self < stop when step < 0"
  fails "Numeric#step Numeric#step with [stop, step] when self and stop are Fixnums but step is a String raises an ArgumentError if given a block"
  fails "Numeric#step Numeric#step with [stop, +step] when self, stop or step is a Float is careful about not yielding a value greater than limit"
  fails "Numeric#step Numeric#step with [stop, -step] when self, stop or step is a Float is careful about not yielding a value smaller than limit"
  fails "Numeric#step Numeric#step with [stop, +Infinity] does not yield when stop is -Infinity"
  fails "Numeric#step Numeric#step with [stop, -infinity] does not yield when stop is Infinity"
  fails "Numeric#step Numeric#step with [infinity, -step] does not yield when self is -infinity"
  fails "Numeric#step Numeric#step with [infinity, -step] does not yield when self is +infinity"
  fails "Numeric#step Numeric#step with [infinity, step] does not yield when self is infinity"
  fails "Numeric#step Numeric#step with [-infinity, step] does not yield when self is -infinity"
  fails "Numeric#step Numeric#step with [-infinity, -step] does not yield when self is -infinity"
  fails "Numeric#step when no block is given returned Enumerator size raises an ArgumentError when step is 0"
  fails "Numeric#step when no block is given returned Enumerator size raises an ArgumentError when step is 0.0"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is positive returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is positive returns 0 if value > limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is negative returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is negative returns 0 if value < limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns 0 if value > limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns 1 if step is Float::INFINITY"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns 0 if value < limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns 1 if step is Float::INFINITY"
  fails "Numeric#to_c returns a Complex object"
  fails "Numeric#to_c uses self as the real component"
  fails "Numeric#to_c uses 0 as the imaginary component"
  fails "Numeric#to_int returns self#to_i"
  fails "Numeric#truncate converts self to a Float (using #to_f) and returns the #truncate'd result"
  fails "Numeric#-@ with a Numeric subclass calls #coerce(0) on self, then subtracts the second element of the result from the first"
  fails "Numeric#+@ returns self"
  fails "Numeric#zero? returns true if self is 0"
  fails "Numeric#zero? returns false if self is not 0"
end
