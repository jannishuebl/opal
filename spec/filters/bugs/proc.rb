opal_filter "Proc" do
  fails "Proc.allocate raises a TypeError"
  fails "Proc#binding returns a Binding instance"
  fails "Proc#binding returns the binding associated with self"
  fails "Proc as an implicit block pass argument remains the same object if re-vivified by the target method"
  fails "Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda"
  fails "Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda"
  fails "Proc#=== invokes self"
  fails "Proc#=== sets self's parameters to the given values"
  fails "Proc#=== can receive block arguments"
  fails "Proc#=== on a Proc created with Proc.new replaces missing arguments with nil"
  fails "Proc#=== on a Proc created with Proc.new silently ignores extra arguments"
  fails "Proc#=== on a Proc created with Proc.new auto-explodes a single Array argument"
  fails "Proc#=== on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc"
  fails "Proc#=== on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc"
  fails "Proc#=== on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda"
  fails "Proc#=== on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda"
  fails "Proc#=== on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc"
  fails "Proc#clone returns a copy of self"
  fails "Proc#curry returns a Proc when called on a proc"
  fails "Proc#curry returns a Proc when called on a lambda"
  fails "Proc#curry calls the curried proc with the arguments if sufficient arguments have been given"
  fails "Proc#curry returns a Proc that consumes the remainder of the arguments unless sufficient arguments have been given"
  fails "Proc#curry can be called multiple times on the same Proc"
  fails "Proc#curry can be passed superfluous arguments if created from a proc"
  fails "Proc#curry raises an ArgumentError if passed superfluous arguments when created from a lambda"
  fails "Proc#curry returns Procs with arities of -1"
  fails "Proc#curry produces Procs that raise ArgumentError for #binding"
  fails "Proc#curry produces Procs that return [[:rest]] for #parameters"
  fails "Proc#curry produces Procs that return nil for #source_location"
  fails "Proc#curry produces Procs that can be passed as the block for instance_exec"
  fails "Proc#curry combines arguments and calculates incoming arity accurately for successively currying"
  fails "Proc#curry with arity argument accepts an optional Integer argument for the arity"
  fails "Proc#curry with arity argument returns a Proc when called on a proc"
  fails "Proc#curry with arity argument returns a Proc when called on a lambda"
  fails "Proc#curry with arity argument retains the lambda-ness of the Proc on which its called"
  fails "Proc#curry with arity argument raises an ArgumentError if called on a lambda that requires more than _arity_ arguments"
  fails "Proc#curry with arity argument raises an ArgumentError if called on a lambda that requires fewer than _arity_ arguments"
  fails "Proc#curry with arity argument calls the curried proc with the arguments if _arity_ arguments have been given"
  fails "Proc#curry with arity argument returns a Proc that consumes the remainder of the arguments when fewer than _arity_ arguments are given"
  fails "Proc#curry with arity argument can be specified multiple times on the same Proc"
  fails "Proc#curry with arity argument raises an ArgumentError if passed more than _arity_ arguments when created from a lambda"
  fails "Proc#curry with arity argument returns Procs with arities of -1 regardless of the value of _arity_"
  fails "Proc#dup returns a copy of self"
  fails "Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda"
  fails "Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda"
  fails "Proc#hash returns an Integer"
  fails "Proc#inspect for a proc created with lambda returns a description including '(lambda)' and optionally including file and line number"
  fails "Proc#inspect for a proc created with UnboundMethod#to_proc returns a description including '(lambda)' and optionally including file and line number"
  fails "Proc#lambda? is preserved when passing a Proc with & to the lambda keyword"
  fails "Proc#lambda? is preserved when passing a Proc with & to the proc keyword"
  fails "Proc#lambda? returns true for a Method converted to a Proc"
  fails "Proc#lambda? is preserved when a Proc is curried"
  fails "Proc#lambda? is preserved when a curried Proc is called without enough arguments"
  fails "Proc.new with an associated block raises a LocalJumpError when context of the block no longer exists"
  fails "Proc.new with an associated block returns a subclass of Proc"
  fails "Proc.new with an associated block calls initialize on the Proc object"
  fails "Proc.new with an associated block returns a new Proc instance from the block passed to the containing method"
  fails "Proc.new with an associated block returns a new Proc instance from the block passed to the containing method"
  fails "Proc.new with an associated block called on a subclass of Proc returns an instance of the subclass"
  fails "Proc.new with an associated block called on a subclass of Proc using a reified block parameter returns an instance of the subclass"
  fails "Proc.new with an associated block called on a subclass of Proc that does not 'super' in 'initialize' still constructs a functional proc"
  fails "Proc.new with a block argument returns the passed proc created from a method"
  fails "Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a block"
  fails "Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a method"
  fails "Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a symbol"
  fails "Proc.new without a block uses the implicit block from an enclosing method"
  fails "Proc#source_location returns an Array"
  fails "Proc#source_location sets the first value to the path of the file in which the proc was defined"
  fails "Proc#source_location sets the last value to a Fixnum representing the line on which the proc was defined"
  fails "Proc#source_location works even if the proc was created on the same line"
  fails "Proc#source_location returns the first line of a multi-line proc (i.e. the line containing 'proc do')"
  fails "Proc#source_location returns the location of the proc's body; not necessarily the proc itself"
  fails "Proc#to_s for a proc created with lambda returns a description including '(lambda)' and optionally including file and line number"
  fails "Proc#to_s for a proc created with UnboundMethod#to_proc returns a description including '(lambda)' and optionally including file and line number"
  fails "Proc#yield invokes self"
  fails "Proc#yield sets self's parameters to the given values"
  fails "Proc#yield can receive block arguments"
  fails "Proc#yield on a Proc created with Proc.new replaces missing arguments with nil"
  fails "Proc#yield on a Proc created with Proc.new silently ignores extra arguments"
  fails "Proc#yield on a Proc created with Proc.new auto-explodes a single Array argument"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda"
  fails "Proc#yield on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc"
end
